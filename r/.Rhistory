df = read.csv('Mall_Customers.csv')
# Import dataset
df = read.csv('Mall_Customers.csv')
# Create Boolean vector with random split
library(caTools)
split = sample.split(df$y, SplitRatio=0.8)
# Split into training and test set
train = subset(df, split == TRUE)
test = subset(df, split == FALSE)
# Feature scaling
# Pick only numerical columns
train[, -ncol(train)] = scale(train[, -ncol(train)])
test[, -ncol(test)] = scale(test[, -ncol(test)])
# Apply LDA
install.packages('MASS')
library(MASS)
lda = lda(groups ~ ., data=train)
train = as.data.frame(predict(lda, train))
test = as.data.frame(predict(lda, test))
View(df)
summary(df)
split = sample.split(df[4], SplitRatio=0.8)
# Split into training and test set
train = subset(df, split == TRUE)
test = subset(df, split == FALSE)
library(caTools)
install.packages('caTools')
library(caTools)
split = sample.split(df[4], SplitRatio=0.8)
# Split into training and test set
train = subset(df, split == TRUE)
test = subset(df, split == FALSE)
train[, -ncol(train)] = scale(train[, -ncol(train)])
test[, -ncol(test)] = scale(test[, -ncol(test)])
train
split = sample.split(df$y, SplitRatio=0.8)
split = sample.split(df[4], SplitRatio=0.8)
split
df
split
sample.split(df, SplitRatio=0.8)
sample.split(df[,4], SplitRatio=0.8)
str(df)
df$Spending.Score..1.100.
# Split into training and test set
train = subset(df, split == TRUE)
test = subset(df, split == FALSE)
split =sample.split(df[,4], SplitRatio=0.8)
# Split into training and test set
train = subset(df, split == TRUE)
test = subset(df, split == FALSE)
train[, -ncol(train)] = scale(train[, -ncol(train)])
test[, -ncol(test)] = scale(test[, -ncol(test)])
View(test)
View(test)
split = sample.split(df$Spending.Score..1.100., SplitRatio=0.8)
train = subset(df, split == TRUE)
test = subset(df, split == FALSE)
train[, 3:4] = scale(train[, 3:4])
test[, 3:4] = scale(test[, 3:4])
library(MASS)
lda = lda(groups ~ ., data=train)
train = as.data.frame(predict(lda, train))
test = as.data.frame(predict(lda, test))
str(test)
lda = lda(Spending.Score..1.100. ~ ., data=train)
train = as.data.frame(predict(lda, train))
test = as.data.frame(predict(lda, test))
lda$xlevels
lda
y_pred = predict(lda, train)
train = subset(df, split == TRUE)
test = subset(df, split == FALSE)
train[, 3:4] = scale(train[, 3:4])
test[, 3:4] = scale(test[, 3:4])
y_pred = predict(lda, train)
y_pred$x
y_pred$class
y_pred$posterior
c(y_pred$x, y_pred$class)
c(y_pred$x, y_pred$class)[1]
c(y_pred$x, y_pred$class)[1,]
y_pred$x
y_pred$class
str(y_pred)
y_pred$class[3]
length(y_pred$class)
length(y_pred$x)
length(y_pred$x)/4
cbind(y_pred$x, y_pred$class)
cbind(y_pred$x, y_pred$class, y_pred$x)
y_pred$posterior
y_pred$posterior[1]
y_pred$posterior[1,]
max(y_pred$posterior[1,])
which.max(y_pred$posterior[1,])
which.max(y_pred$posterior[2,])
which.max(y_pred$posterior[3,])
shape(y_pred$posterior[1,])
size(y_pred$posterior[1,])
length(y_pred$posterior[1,])
length(y_pred$posterior[1,:])
length(y_pred$posterior[1,])
y_pred$posterior[1,]
post = y_pred$posterior[1,]
which.max(post)
post[78]
post[78][1]
post[78][2]
which.max(post)[0]
which.max(post)[1]
which.max(post)[2]
which.max(post)[2,1]
which.max(post)[2][1]
which.max(post)[1][1]
which.max(post)[1][2]
which.max(post) == 78
which.max(post) == 92
post = apply(y_pred$posterior,2,which.max)
post
length(post)
length(apply(y_pred$posterior, 1, which.max))
